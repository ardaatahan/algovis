{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Navbar/Navbar.js","algorithms/Algorithms.js","components/Algovis/Algovis.js","App.js","index.js"],"names":["module","exports","Navbar","AppBar","position","style","background","className","styles","container","Toolbar","Button","onClick","props","reset","disabled","this","isAnimating","Typography","color","InputLabel","marginTop","Slider","value","arrayLength","min","max","step","onChange","e","newValue","handleArrayLengthChange","width","speed","handleSpeedChange","FormControl","Select","algorithm","handleAlgorithmChange","inputProps","name","MenuItem","sortFunction","Component","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortFirst","start","end","pivotIdx","pivotValue","lower","run","temp","partition","getBubbleSortAnimations","bubbleSort","Algovis","state","resetArray","randomIntFromInterval","setState","target","mergeSort","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","newHeight","height","console","log","quickSort","animatingArray","adjustWidth","body","clientWidth","margin","map","el","key","marginLeft","marginRight","random","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fe226341.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__1ESpZ\"};","import React, { Component } from \"react\";\nimport {\n  AppBar,\n  Typography,\n  Button,\n  Toolbar,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Slider,\n} from \"@material-ui/core\";\n\nimport styles from \"./Navbar.module.css\";\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <>\n        <AppBar position=\"fixed\" style={{ background: \"turquoise\" }}>\n          <div className={styles.container}>\n            <Toolbar>\n              <Button\n                onClick={() => this.props.reset()}\n                disabled={this.props.isAnimating}\n              >\n                <Typography style={{ color: \"black\" }}>\n                  Generate New Array\n                </Typography>\n              </Button>\n            </Toolbar>\n            <div>\n              <InputLabel style={{ marginTop: \"15px\" }}>\n                Array Length\n              </InputLabel>\n              <Slider\n                value={this.props.arrayLength}\n                min={5}\n                max={325}\n                step={10}\n                onChange={(e, newValue) => {\n                  if (newValue === this.props.arrayLength) {\n                    return;\n                  }\n\n                  return this.props.handleArrayLengthChange(newValue);\n                }}\n                style={{ width: \"100px\", marginTop: \"5px\" }}\n                disabled={this.props.isAnimating}\n              />\n            </div>\n            <div>\n              <InputLabel style={{ marginTop: \"15px\" }}>\n                Animation Speed\n              </InputLabel>\n              <Slider\n                value={11 - this.props.speed}\n                min={1}\n                max={10}\n                step={1}\n                onChange={(e, newValue) => {\n                  if (newValue === this.props.speed) {\n                    return;\n                  }\n\n                  return this.props.handleSpeedChange(newValue);\n                }}\n                style={{ width: \"100px\", marginTop: \"5px\" }}\n                disabled={this.props.isAnimating}\n              />\n            </div>\n            <Toolbar>\n              <FormControl>\n                <InputLabel>Algorithm:</InputLabel>\n                <Select\n                  value={this.props.algorithm}\n                  onChange={(e) => this.props.handleAlgorithmChange(e)}\n                  inputProps={{\n                    name: \"age\",\n                  }}\n                  disabled={this.props.isAnimating}\n                >\n                  <MenuItem value=\"mergeSort\">\n                    <Typography style={{ color: \"black\" }}>\n                      Merge Sort\n                    </Typography>\n                  </MenuItem>\n                  <MenuItem value=\"quickSort\">\n                    <Typography style={{ color: \"black\" }}>\n                      Quick Sort\n                    </Typography>\n                  </MenuItem>\n                  <MenuItem value=\"bubbleSort\">\n                    <Typography style={{ color: \"black\" }}>\n                      Bubble Sort\n                    </Typography>\n                  </MenuItem>\n                </Select>\n              </FormControl>\n            </Toolbar>\n            <Toolbar>\n              <Button\n                onClick={() => this.props.sortFunction()}\n                disabled={this.props.isAnimating}\n              >\n                <Typography style={{ color: \"black\" }}>Sort</Typography>\n              </Button>\n            </Toolbar>\n          </div>\n        </AppBar>\n        <Toolbar />\n      </>\n    );\n  }\n}\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  let start = 0;\n  let end = array.length - 1;\n  quickSortFirst(array, start, end, animations);\n  return animations;\n}\n\nfunction quickSortFirst(array, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n  let pivotIdx = partition(array, start, end, animations);\n  quickSortFirst(array, start, pivotIdx - 1, animations);\n  quickSortFirst(array, pivotIdx + 1, end, animations);\n}\n\nfunction partition(array, start, end, animations) {\n  let pivotValue = array[start];\n  let lower = start + 1;\n  let run = true;\n  while (run) {\n    while (array[lower] <= pivotValue && lower <= end) {\n      animations.push([start, lower]);\n      animations.push([start, lower]);\n      animations.push([0, array[0]]);\n      animations.push([0, array[0]]);\n      lower += 1;\n    }\n    while (array[end] >= pivotValue && lower <= end) {\n      animations.push([start, end]);\n      animations.push([start, end]);\n      animations.push([0, array[0]]);\n      animations.push([0, array[0]]);\n      end -= 1;\n    }\n    if (end < lower) {\n      run = false;\n    } else {\n      animations.push([lower, end]);\n      animations.push([lower, end]);\n      animations.push([lower, array[end]]);\n      animations.push([end, array[lower]]);\n      let temp = array[lower];\n      array[lower] = array[end];\n      array[end] = temp;\n    }\n  }\n  animations.push([start, end]);\n  animations.push([start, end]);\n  animations.push([start, array[end]]);\n  animations.push([end, pivotValue]);\n  let temp = array[end];\n  array[end] = pivotValue;\n  array[start] = temp;\n  return end;\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  bubbleSort(array, animations);\n  return animations;\n}\n\nfunction bubbleSort(array, animations) {\n  let end = array.length - 1;\n  while (end >= 1) {\n    for (let j = 0; j < end; j++) {\n      if (array[j] > array[j + 1]) {\n        animations.push([j, j + 1]);\n        animations.push([j, j + 1]);\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n    }\n    end--;\n  }\n}\n","import React, { Component } from \"react\";\nimport Navbar from \"../Navbar/Navbar\";\nimport {\n  getMergeSortAnimations,\n  getQuickSortAnimations,\n  getBubbleSortAnimations,\n} from \"../../algorithms/Algorithms\";\n\nimport \"./Algovis.css\";\n\nconst primaryColor = \"#af5166\";\nconst secondaryColor = \"turquoise\";\n\nexport default class Algovis extends Component {\n  // The current state of the array\n  state = {\n    array: [],\n    algorithm: \"mergeSort\",\n    arrayLength: 305,\n    speed: 1,\n  };\n\n  // Initialize the array with random numbers when this component mounts\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // An arrow function that populates an empty array with random numbers\n  // and sets the state to the newly generated array\n  resetArray = () => {\n    const array = [];\n\n    for (let i = 0; i < this.state.arrayLength; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({ array });\n  };\n\n  // An arrow function that changes the algorithm state\n  handleAlgorithmChange = (e) => {\n    this.setState({ algorithm: e.target.value });\n  };\n\n  // An arrow function that changes the array length\n  handleArrayLengthChange = (newValue) => {\n    this.setState({ arrayLength: newValue });\n    this.resetArray();\n  };\n\n  // An arrow function that changes the animation speed\n  handleSpeedChange = (newValue) => {\n    const speed = 11 - newValue;\n    this.setState({ speed });\n  };\n\n  // Mergesort animation\n  mergeSort = () => {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? secondaryColor : primaryColor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n\n    console.log(this.state.isAnimating);\n  };\n\n  // Quicksort animation\n  quickSort = () => {\n    const animatingArray = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animatingArray.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"bar\");\n      const isColorChange = i % 4 <= 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animatingArray[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? secondaryColor : primaryColor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animatingArray[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n  };\n\n  // Bubblesort animation\n  bubbleSort = () => {\n    const animatingArray = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animatingArray.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"bar\");\n      const isColorChange = i % 4 <= 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animatingArray[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? secondaryColor : primaryColor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animatingArray[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n  };\n\n  render() {\n    // Extract the array and the algorithm from the state\n    const { array, algorithm, arrayLength, speed, isAnimating } = this.state;\n\n    // Get the current width of the screen and adjust it acordingly for the styling\n    const adjustWidth = Math.floor(\n      document.body.clientWidth / (array.length * 4)\n    );\n\n    const width = `${adjustWidth}px`;\n\n    // Adjust the margin of the bars according to the array length\n    const adjustMargin =\n      arrayLength < 5\n        ? 10\n        : arrayLength < 8\n        ? 8\n        : arrayLength < 11\n        ? 6\n        : arrayLength < 20\n        ? 4\n        : arrayLength < 50\n        ? 3.5\n        : arrayLength < 100\n        ? 3\n        : arrayLength < 130\n        ? 2.5\n        : 2;\n\n    const margin = `${adjustMargin}px`;\n\n    // Set the sort function accordingly\n    let sortFunction = this.mergeSort;\n\n    if (this.state.algorithm === \"mergeSort\") {\n      sortFunction = this.mergeSort;\n    } else if (this.state.algorithm === \"quickSort\") {\n      sortFunction = this.quickSort;\n    } else if (this.state.algorithm === \"bubbleSort\") {\n      sortFunction = this.bubbleSort;\n    }\n\n    // Return the bars represented by the numeric values of the elements of the array\n    return (\n      <>\n        <Navbar\n          reset={this.resetArray}\n          algorithm={algorithm}\n          arrayLength={arrayLength}\n          speed={speed}\n          isAnimating={isAnimating}\n          handleAlgorithmChange={this.handleAlgorithmChange}\n          handleArrayLengthChange={this.handleArrayLengthChange}\n          handleSpeedChange={this.handleSpeedChange}\n          sortFunction={sortFunction}\n        />\n        <div className=\"container\">\n          {array.map((el, i) => (\n            <p\n              className=\"bar\"\n              key={i}\n              style={{\n                height: `${el}px`,\n                width,\n                marginLeft: margin,\n                marginRight: margin,\n                backgroundColor: primaryColor,\n              }}\n            ></p>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\n// Function taken from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript?rq=1\nconst randomIntFromInterval = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Algovis from \"./components/Algovis/Algovis\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Algovis />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}